/*
	oolite-default-atmosphere.fragment
	Default fragment shader for Oolite NEW_PLANETS.


	© 2009–2013 Jens Ayton

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

#define DIFFUSE_LIGHT		(gl_LightSource[1].diffuse.rgb)
#define AMBIENT_LIGHT		(gl_LightModel.ambient.rgb)

uniform vec4			atmPosition;
uniform float			atmRadius;

// No vNormal, because normal is always 0,0,1 in tangent space.
varying vec3			vEyeVector;
varying vec3			vLight1Vector;


const vec3				kTerminatorThreshold = vec3(0.1, 0.105, 0.12);
const float				kFresnelMixFactor = 0.25;


void main()
{
	vec3 totalColor = vec3(0);
	vec3 normal = vec3(0, 0, 1);

	// Diffuse light
	vec3 light1Vector = normalize(vLight1Vector);
	vec3 eyeVector = normalize(vEyeVector);
	vec3 diffuseColor = DIFFUSE_LIGHT;
	// mix in some light blue color
	totalColor += diffuseColor * vec3(0.85, 0.85, 1.0);
	
	// add ambient light
	totalColor += AMBIENT_LIGHT;
	
	totalColor *= smoothstep(vec3(0.0), kTerminatorThreshold, abs(vec3(light1Vector.z)));
	
	// create a fresnel torus around the planet
	vec3 fresnel = vec3(pow((1.0 - clamp(dot(normal, eyeVector), 0.0, 1.0)), 5.0));
	
	// get the fresnel lit up from the correct direction
	vec3 invLight = vec3(dot(light1Vector, normal));
	totalColor *= dot(normalize(fresnel), invLight);
	
	// calculate when the atmosphere should fade in / out
	float atmDistance = length(atmPosition.xyz);
	float minDistance = atmRadius + 3500.0;
	float quant = atmDistance < (minDistance + 2000.0 ) ?
					( atmDistance - minDistance ) / 2000.0 : 
					1.0;
	float magFresnel = length(fresnel);
	float dp = abs(dot(normalize(vEyeVector), vec3(0.0,0.0,1.0)));
	
	// calculate final opacity, special handling for angles > 83.4 deg (cos(83.4deg) = 0.115)
	// to fade atmosphere out at its edge
	float newOpacity = dp > 0.115 ? magFresnel * quant : pow(dp / 0.115, 3.0) * quant;
	
	gl_FragColor = vec4(mix(totalColor, fresnel, kFresnelMixFactor), newOpacity);
}
